/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,27],$V2=[1,28],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,25],$Ve=[1,26],$Vf=[1,16,27,28,29,30,31,40,42,43,46,53,59,62,63,64],$Vg=[1,43],$Vh=[1,39],$Vi=[1,41],$Vj=[1,42],$Vk=[1,38],$Vl=[1,40],$Vm=[1,16,27,28,29,30,31,40,42,43,46,53,59,61,62,63,64],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,16,26,27,28,29,30,31,32,33,34,35,36,37,40,42,43,45,46,47,48,49,50,51,52,53,57,59,61,62,63,64],$Vu=[17,27,28,29,38,39],$Vv=[27,28,29,30,31,40,42,43,46,53,61,62,63,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"instruccion":5,"asignacion":6,"etiqueta":7,"incondicional":8,"condicional":9,"imprimir":10,"funcion":11,"callFuncion":12,"declaracion":13,"write_sentence":14,"exit_sentence":15,"VAR":16,"ID":17,"IGUAL":18,"e":19,"instruccionesF":20,"instruccionF":21,"var":22,"operacion":23,"estructura":24,"CORIZQ":25,"CORDER":26,"TEMPORAL":27,"H":28,"P":29,"HEAP":30,"STACK":31,"MAS":32,"MENOS":33,"POR":34,"DIVIDIR":35,"MODULO":36,"POTENCIA":37,"ENTERO":38,"DECIMAL":39,"ETIQUETA":40,"DSPUNTOS":41,"GOTO":42,"IF":43,"operador":44,"THEN":45,"IFFALSE":46,"IGUALIGUAL":47,"DIFERENTE":48,"MAYOR":49,"MENOR":50,"MAYORIGUAL":51,"MENORIGUAL":52,"PRINT":53,"PARIZQ":54,"IE":55,"COMA":56,"PARDER":57,"IC":58,"PROC":59,"LLAVEIZQ":60,"LLAVEDER":61,"CALL":62,"WRITE":63,"EXIT":64,"$accept":0,"$end":1},
terminals_: {2:"error",16:"VAR",17:"ID",18:"IGUAL",25:"CORIZQ",26:"CORDER",27:"TEMPORAL",28:"H",29:"P",30:"HEAP",31:"STACK",32:"MAS",33:"MENOS",34:"POR",35:"DIVIDIR",36:"MODULO",37:"POTENCIA",38:"ENTERO",39:"DECIMAL",40:"ETIQUETA",41:"DSPUNTOS",42:"GOTO",43:"IF",45:"THEN",46:"IFFALSE",47:"IGUALIGUAL",48:"DIFERENTE",49:"MAYOR",50:"MENOR",51:"MAYORIGUAL",52:"MENORIGUAL",53:"PRINT",54:"PARIZQ",55:"IE",56:"COMA",57:"PARDER",58:"IC",59:"PROC",60:"LLAVEIZQ",61:"LLAVEDER",62:"CALL",63:"WRITE",64:"EXIT"},
productions_: [0,[3,1],[3,1],[4,2],[4,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[13,4],[20,2],[20,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[6,5],[6,6],[6,3],[6,6],[22,1],[22,1],[22,1],[24,1],[24,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[7,2],[8,2],[9,7],[9,6],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[10,7],[10,7],[10,7],[11,5],[11,4],[12,2],[14,4],[15,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
parser.arbol.raiz = $$[$0]; parser.linea = 0;
break;
case 2:
 parser.arbol.errores.push({tipo: 'Sintactico', mensaje : yytext , linea : this._$.first_line , columna: this._$.first_column}); 
break;
case 3: case 16:
this.$ = $$[$0-1]; this.$.push($$[$0]); parser.linea++;
break;
case 4: case 17:
this.$ = []; this.$.push($$[$0]); parser.linea++;
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25:
this.$ = $$[$0];
break;
case 15:
this.$ = new Declaracion3D($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,parser.linea); 
break;
case 26:
this.$ = new Asignacion3D($$[$0-2],$$[$0],$$[$0-1],$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,parser.linea);
break;
case 27:
this.$ = new Asignacion3D($$[$0-3],$$[$0],"igual",$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,parser.linea);
break;
case 28:
this.$ = new Asignacion3D($$[$0],null,"igual",$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,parser.linea);
break;
case 29:
this.$ = new Asignacion3D(new Valor3D({tipo :$$[$0-3], valor: 0, linea: _$[$0-5].first_line, columna: _$[$0-5].first_column}),$$[$0-1],"igual",$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,parser.linea);
break;
case 30:
this.$ = $$[$0]
break;
case 31:
this.$ = "h"
break;
case 32:
this.$ = "p"
break;
case 33:
this.$ = "heap";
break;
case 34:
this.$ = "stack";
break;
case 35:
this.$ = "suma";
break;
case 36:
this.$ = "resta";
break;
case 37:
this.$ = "multiplicacion";
break;
case 38:
this.$ = "division";
break;
case 39:
this.$ = "modulo";
break;
case 40:
this.$ = "potencia";
break;
case 41:
this.$ = new Valor3D({tipo : "int", valor: $$[$0], linea: _$[$0].first_line, columna: _$[$0].first_column});
break;
case 42: case 46:
this.$ = new Valor3D({tipo : "temporal", valor: $$[$0], linea: _$[$0].first_line, columna: _$[$0].first_column});
break;
case 43:
this.$ = new Valor3D({tipo: "double", valor:  $$[$0], linea: _$[$0].first_line, columna: _$[$0].first_column});
break;
case 44:
this.$ = new Valor3D({tipo: "h", valor:  $$[$0], linea: _$[$0].first_line, columna: _$[$0].first_column});
break;
case 45:
this.$ = new Valor3D({tipo: "p", valor:  $$[$0], linea: _$[$0].first_line, columna: _$[$0].first_column});
break;
case 47:
this.$ = new Etiqueta($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,parser.linea);
break;
case 48:
 this.$ = new Incondicional(parser.linea,_$[$0-1].first_line,_$[$0-1].first_column, $$[$0]);
break;
case 49:
this.$ = new Condicional(parser.linea,_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-5],$$[$0-3],$$[$0],0);
break;
case 50:
this.$ = new Condicional(parser.linea,_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],$$[$0-4],$$[$0-2],$$[$0],1);
break;
case 51:
this.$ = "=="
break;
case 52:
this.$ = "!="
break;
case 53:
this.$ = ">"
break;
case 54:
this.$ = "<"
break;
case 55:
this.$ = ">="
break;
case 56:
this.$ = "<="
break;
case 57:
 this.$ = new Print(0,$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column,parser.linea); 
break;
case 58:
 this.$ = new Print(1,$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column,parser.linea); 
break;
case 59:
 this.$ = new Print(2,$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column,parser.linea); 
break;
case 60:
 this.$ = new Funcion($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column,parser.linea);
break;
case 61:
 this.$ = new Funcion($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].first_column,parser.linea);
break;
case 62:
this.$ = new CallFuncion($$[$0],_$[$0-1].first_line,_$[$0-1].first_column,parser.linea);
break;
case 63:
 this.$ = new Write3D($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,parser.linea); 
break;
case 64:
 this.$ = new Exit($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,parser.linea); 
break;
}
},
table: [{2:[1,3],3:1,4:2,5:4,6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:$V0,22:15,24:16,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,40:$V6,42:$V7,43:$V8,46:$V9,53:$Va,59:$Vb,62:$Vc,63:$Vd,64:$Ve},{1:[3]},{1:[2,1],5:32,6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:$V0,22:15,24:16,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,40:$V6,42:$V7,43:$V8,46:$V9,53:$Va,59:$Vb,62:$Vc,63:$Vd,64:$Ve},{1:[2,2]},o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{18:[1,33]},{25:[1,34]},{41:[1,35]},{40:[1,36]},{17:$Vg,19:37,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{17:$Vg,19:44,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{54:[1,45]},{17:[1,46]},{17:[1,47]},{17:[1,48]},{54:[1,49]},{54:[1,50]},{18:[2,30]},{18:[2,31]},{18:[2,32]},{25:[2,33]},{25:[2,34]},o($Vf,[2,3]),{17:$Vg,19:51,24:52,27:$Vh,28:$Vi,29:$Vj,30:$V4,31:$V5,38:$Vk,39:$Vl},{17:$Vg,19:53,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},o($Vm,[2,47]),o($Vm,[2,48]),{44:54,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs},o($Vt,[2,41]),o($Vt,[2,42]),o($Vt,[2,43]),o($Vt,[2,44]),o($Vt,[2,45]),o($Vt,[2,46]),{44:61,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs},{36:[1,62]},{60:[1,63]},o($Vm,[2,62]),{18:[1,64]},{17:$Vg,19:65,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{17:$Vg,19:66,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},o($Vm,[2,28],{23:67,32:[1,68],33:[1,69],34:[1,70],35:[1,71],36:[1,72],37:[1,73]}),{25:[1,74]},{26:[1,75]},{17:$Vg,19:76,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},o($Vu,[2,51]),o($Vu,[2,52]),o($Vu,[2,53]),o($Vu,[2,54]),o($Vu,[2,55]),o($Vu,[2,56]),{17:$Vg,19:77,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{17:[1,80],55:[1,78],58:[1,79]},{6:84,7:85,8:86,9:87,10:88,12:89,14:90,15:91,20:81,21:83,22:15,24:16,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,40:$V6,42:$V7,43:$V8,46:$V9,53:$Va,61:[1,82],62:$Vc,63:$Vd,64:$Ve},{17:$Vg,19:92,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{57:[1,93]},{57:[1,94]},{17:$Vg,19:95,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},o($Vu,[2,35]),o($Vu,[2,36]),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($Vu,[2,40]),{17:$Vg,19:96,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{18:[1,97]},{45:[1,98]},{42:[1,99]},{56:[1,100]},{56:[1,101]},{56:[1,102]},{6:84,7:85,8:86,9:87,10:88,12:89,14:90,15:91,21:104,22:15,24:16,27:$V1,28:$V2,29:$V3,30:$V4,31:$V5,40:$V6,42:$V7,43:$V8,46:$V9,53:$Va,61:[1,103],62:$Vc,63:$Vd,64:$Ve},o($Vf,[2,61]),o($Vv,[2,17]),o($Vv,[2,18]),o($Vv,[2,19]),o($Vv,[2,20]),o($Vv,[2,21]),o($Vv,[2,22]),o($Vv,[2,23]),o($Vv,[2,24]),o($Vv,[2,25]),o($Vf,[2,15]),o($Vm,[2,63]),o($Vm,[2,64]),o($Vm,[2,26]),{26:[1,105]},{17:$Vg,19:106,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{42:[1,107]},{40:[1,108]},{17:$Vg,19:109,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{17:$Vg,19:110,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},{17:$Vg,19:111,27:$Vh,28:$Vi,29:$Vj,38:$Vk,39:$Vl},o($Vf,[2,60]),o($Vv,[2,16]),o($Vm,[2,29]),o($Vm,[2,27]),{40:[1,112]},o($Vm,[2,50]),{57:[1,113]},{57:[1,114]},{57:[1,115]},o($Vm,[2,49]),o($Vm,[2,57]),o($Vm,[2,58]),o($Vm,[2,59])],
defaultActions: {3:[2,2],27:[2,30],28:[2,31],29:[2,32],30:[2,33],31:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


parser.arbol = {
    raiz: null,
    errores : []
};

parser.linea = 0;/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return 39
break;
case 3:return 38
break;
case 4:return 39
break;
case 5:return 38
break;
case 6:return 56
break;
case 7:return 41
break;
case 8:return 54
break;
case 9:return 57
break;
case 10:return 25
break;
case 11:return 26
break;
case 12:return 60
break;
case 13:return 61
break;
case 14:return 52
break;
case 15:return 51
break;
case 16:return 47
break;
case 17:return 48
break;
case 18:return 50
break;
case 19:return 49
break;
case 20:return 32
break;
case 21:return 33
break;
case 22:return 34
break;
case 23:return 35
break;
case 24:return 36
break;
case 25:return 37
break;
case 26:return "IGUAL"
break;
case 27:return 30
break;
case 28:return 31
break;
case 29:return 28
break;
case 30:return 29
break;
case 31:return 55
break;
case 32:return 58
break;
case 33:return 17
break;
case 34:return 53
break;
case 35:return 59
break;
case 36:return 62
break;
case 37:return 43
break;
case 38:return 46
break;
case 39:return 42
break;
case 40:return 45
break;
case 41:return 16
break;
case 42:return 63
break;
case 43:return 64
break;
case 44:return 27
break;
case 45:return 40
break;
case 46:return 17
break;
case 47:
break;
case 48: parser.arbol.errores.push({tipo : 'Lexico', mensaje: yy_.yytext , linea: yy_.yylloc.first_line , columna: yy_.yylloc.first_column}); 
break;
}
},
rules: [/^(?:[ \r\t\n]+)/i,/^(?:[;]+.*)/i,/^(?:-[0-9]+(\.[0-9]+))/i,/^(?:-[0-9]+)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:,)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:HEAP\b)/i,/^(?:STACK\b)/i,/^(?:H\b)/i,/^(?:P\b)/i,/^(?:E\b)/i,/^(?:C\b)/i,/^(?:D\b)/i,/^(?:PRINT\b)/i,/^(?:PROC\b)/i,/^(?:CALL\b)/i,/^(?:if\b)/i,/^(?:ifFalse\b)/i,/^(?:goto\b)/i,/^(?:then\b)/i,/^(?:var\b)/i,/^(?:write\b)/i,/^(?:exit\b)/i,/^(?:T[0-9]+)/i,/^(?:L[0-9]+)/i,/^(?:[A-Za-z]+["_""-"0-9A-Za-z]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}